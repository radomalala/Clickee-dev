{"changed":true,"filter":false,"title":"CustomerController.php","tooltip":"/app/Http/Controllers/Front/CustomerController.php","value":"<?php\nnamespace App\\Http\\Controllers\\Front;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Interfaces\\OrderItemRepositoryInterface;\nuse App\\Interfaces\\OrderRepositoryInterface;\nuse App\\Interfaces\\StoreRepositoryInterface;\nuse App\\Interfaces\\UserRepositoryInterface;\nuse App\\Models\\OrderItem;\nuse App\\User;\nuse App\\UserAddress;\nuse Illuminate\\Pagination\\LengthAwarePaginator;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Request;\nuse Input;\n\nclass CustomerController extends Controller\n{\n\n    protected $user_repository;\n    protected $store_repository;\n    protected $order_item_repository;\n\n    public function __construct(UserRepositoryInterface $user_repository, OrderRepositoryInterface $order_repository, StoreRepositoryInterface $store_repository, OrderItemRepositoryInterface $order_item_repo)\n    {\n        $this->user_repository = $user_repository;\n        $this->order_repository = $order_repository;\n        $this->store_repository = $store_repository;\n        $this->order_item_repository = $order_item_repo;\n    }\n    public function index(){\n        $user_id = Auth::id();\n        $customer = $this->user_repository->getById($user_id);\n        return view('front.customer.index',compact('customer'));\n    }\n\n    public function completedOrders()\n    {\n        $user_id = Auth::id();\n        $completed_orders = $this->order_repository->completedOrders($user_id);\n        return view('front.customer.orders.completed',compact('completed_orders'));\n    }\n\n    public function onGoingOrders()\n    {\n        $user_id = Auth::id();\n        $pending_orders = $this->order_repository->onGoingOrders($user_id);\n        return view('front.customer.orders.pending',compact('pending_orders'));\n    }\n\n    public function postManageAccount(Request $request)\n    {\n        $user = Auth::user();\n        $user->first_name=\\Input::get('first_name');\n        $user->last_name=\\Input::get('last_name');\n        $user->email=\\Input::get('email');\n        $user->phone_number = Input::get('phone');\n        $user->radius = Input::get('radius');\n        if ($user->save(User::$manage_account_rules)) {\n            if(Input::has('zip')){\n                $user_address = ($user->address != null && count($user->address) > 0) ?  $user->address : new UserAddress();\n                $user_address->first_name = Input::get('first_name');\n                $user_address->last_name = Input::get('last_name');\n                $user_address->phone = Input::get('phone');\n                $user_address->zip = Input::get('zip');\n                $user->address()->save($user_address);\n            }\n            \\Session::flash('message.success', 'Account updated successfully.');\n            return \\Redirect::to(\"customer\");\n        } else {\n            \\Session::flash('message.arrayErrors', $user->errors()->all());\n            return \\Redirect::to('customer')->withInput($request->all());\n        }\n    }\n\n    public function postResetPassword()\n    {\n        $user = Auth::user();\n        $user->password=Hash::make(Input::get('password'));\n        $user->save();\n        \\Session::flash('message.success', 'Password updated successfully.');\n        flash()->success('Password updated successfully.');\n        return \\Redirect::to(\"customer\");\n    }\n\n    public function getPendingOrders()\n    {\n        $users = User::find(Auth::id())->store()->get();\n        $brands_id = [];\n        foreach ($users->first()->brands as $brand) {\n            if (!empty($brand->products)) {\n                $brands_id[] = $brand->brand_id;\n            }\n        }\n        $pending_orders = $this->order_repository->getOrders($brands_id);\n        return view('front.customer.orders.pending', compact('pending_orders'));\n    }\n\n\n\n\n}","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"remove","lines":["\t"],"id":2},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]},{"start":{"row":30,"column":0},"end":{"row":30,"column":2},"action":"remove","lines":["\t\t"]},{"start":{"row":30,"column":0},"end":{"row":30,"column":8},"action":"insert","lines":["        "]},{"start":{"row":58,"column":0},"end":{"row":58,"column":2},"action":"remove","lines":["\t\t"]},{"start":{"row":58,"column":0},"end":{"row":58,"column":8},"action":"insert","lines":["        "]},{"start":{"row":59,"column":0},"end":{"row":59,"column":2},"action":"remove","lines":["\t\t"]},{"start":{"row":59,"column":0},"end":{"row":59,"column":8},"action":"insert","lines":["        "]},{"start":{"row":61,"column":0},"end":{"row":61,"column":9},"action":"remove","lines":["        \t"]},{"start":{"row":61,"column":0},"end":{"row":61,"column":12},"action":"insert","lines":["            "]},{"start":{"row":62,"column":0},"end":{"row":62,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":62,"column":0},"end":{"row":62,"column":16},"action":"insert","lines":["                "]},{"start":{"row":63,"column":0},"end":{"row":63,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":63,"column":0},"end":{"row":63,"column":16},"action":"insert","lines":["                "]},{"start":{"row":64,"column":0},"end":{"row":64,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":64,"column":0},"end":{"row":64,"column":16},"action":"insert","lines":["                "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":65,"column":0},"end":{"row":65,"column":16},"action":"insert","lines":["                "]},{"start":{"row":66,"column":0},"end":{"row":66,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":66,"column":0},"end":{"row":66,"column":16},"action":"insert","lines":["                "]},{"start":{"row":67,"column":0},"end":{"row":67,"column":4},"action":"remove","lines":["\t\t\t\t"]},{"start":{"row":67,"column":0},"end":{"row":67,"column":16},"action":"insert","lines":["                "]},{"start":{"row":68,"column":0},"end":{"row":68,"column":3},"action":"remove","lines":["\t\t\t"]},{"start":{"row":68,"column":0},"end":{"row":68,"column":12},"action":"insert","lines":["            "]}]]},"ace":{"folds":[],"scrolltop":843.5,"scrollleft":0,"selection":{"start":{"row":77,"column":20},"end":{"row":77,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":59,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1522068766655}